#!/usr/bin/env bash

## Description {{{
#
# Remove Command using a trash box.
#
# Usage: trash [-rficClbVv] [-v <verbose level>] [-t <trash_box>] <file/directory>
#
TRASH_VERSION=v0.2.3
TRASH_DATE="20/Sep/2018"
#
# }}}

#The MIT License (MIT) {{{
#
#Copyright (c) 2013 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#}}}

# source sentaku {{{
if type sentaku >& /dev/null;then
  . sentaku -n
else
  echo "Install sentaku (https://github.com/rcmdnk/sentaku) first"
  exit 1
fi
# }}}

# Default variables {{{
_SENTAKU_INPUT_FILE=${TRASHLIST:-$HOME/.trashlist}
_SENTAKU_MAX=10000000
_SENTAKU_SEPARATOR=$'\n'
# }}}

_sf_initialize_user () { # {{{
  # Default variables
  rdir=0
  force=0
  confirm=0
  tbox=${TRASHBOX:-$HOME/.Trash}
  # Use more one depth directory to distinguish from other trash
  # (especially for Mac's ~/.Trash case)
  mytbox="$tbox/my_trash_box"
  maxboxsize=${MAXTRASHBOXSIZE:-1024} #MB
  maxsize=${MAXTRASHSIZE:-102} #MB
  clean=0
  clean_full=0
  list=0
  back=0
  verbose=0
  here=0
  trashes=()

  # Modify sentaku variables
  _s_delete=1

  # Help
  _s_help="Usage: trash [-rficClbV] [-v <verbose level>] [-t <trash_box>] <file/directory>

Arguments:
   -r              Remove directory (default: $rdir)
   -f              Remove w/o confirmation (default: $force)
   -i              Remove w/ confirmation (default: $confirm)
   -t <trash_box>  Use given trash box instead of $tbox
   -c              Clean up trash box (make it less than MAXTRASHBOXSIZE)
   -C              Clean up trash box (make it empty)
   -l              List up deleted files/directories in the trash box
   -b              Restore (turn Back) the file from the trash box
   -v <level>      Verbose level for list view
                   0 : Only original location (default).
                   1 : With Delete date-time (yyyymdd-hh:mm).
                   2 : With Current location (in the trash box).
   -V              Show version
   -h              Show this help

To use trash, please specify following variables
in .bashrc or your setting file like (these rh values are default):

At restore mode, you can use vim like move keys like j(down)/k(up)/gg(top)/G(bottom).

In addition, following keys are available at restore mode:

 d     : Delete
 s     : Show details
 Enter : Select to bring back to the original place, and quit
 h     : Select to copy it to current directory (here), and quit
 /     : Search mode
 q     : Quit

export TRASHLIST=~/.trashlist # Where trash list is written
export TRASHBOX=~/.Trash # Where trash will be moved in
                         # (.Trash is Mac's trash box)
export MAXTRASHBOXSIZE=1024 # Max trash box size in MB
                            # Used for clean up
export MAXTRASHSIZE=\`echo \$MAXTRASHBOXSIZE \"*\" 0.1|bc -l|cut -d. -f1\`
    # Trashes larger than MAXTRASHBOXSIZE will be removed by 'rm' directly
"

} # }}}

_sf_check_args () { # {{{
  _s_continue=0
  while getopts rfit:cClbVv:h OPT;do
    case $OPT in
      "r" ) rdir=1 ;;
      "f" ) force=1;confirm=0 ;;
      "i" ) confirm=1;force=1 ;;
      "t" ) tbox="$OPTARG" ;;
      "c" ) clean_full=0;clean=1;;
      "C" ) clean_full=1;clean=1;;
      "l" ) list=1 ;;
      "b" ) back=1 ;;
      "v" ) verbose=$OPTARG ;;
      "V" ) echo "${0##*/} $TRASH_VERSION $TRASH_DATE"; return 0;;
      "h" ) _sf_help;return 0;;
      * ) echo "Check \"${0##*/} -h\" for more information" >/dev/tty;return 1;;

    esac
  done
  shift $((OPTIND - 1))
  trashes=("$@")

  if [[ $clean -eq 1 ]];then
    cleanup $clean_full
    return $?
  fi

  if [[ $list -eq 1 ]];then
    listup
    return $?
  fi

  if [[ $back -eq 1 ]];then
    _s_continue=1
    return 0
  fi

  # Check trashes
  if [[ "${#trashes[@]}" -lt 1 ]];then
    echo "No file/directory is given." >/dev/tty
    echo "$_s_help" >/dev/tty
    return 1
  fi

  # Set rm flags
  if [[ $force -eq 1 ]];then
    rmflag="-f"
  else
    rmflag="-i"
  fi
  if [[ $rdir -eq 1 ]];then
    rmflag="$rmflag -r"
  fi

  # Set today's trash box
  tboxtoday="$mytbox/$(date +%Y%m%d)"
  if [[ ! -d "$tboxtoday" ]];then
    mkdir -p "$tboxtoday"
  fi

  # Iterate on arguments
  for t in "${trashes[@]}";do
    if [[ ! -e "$t" ]];then
      echo "$1: No such file or directory"
      if [[ $force -ne 1 ]];then
        return 1
      fi
      continue
    fi
    t=${t%/}
    trash_size=$(du -ms "${t}" |awk '{print $1}')
    if [[ "${trash_size}" -gt "${maxsize}" ]];then
      echo "$t is larger than $maxsize MB, then I delete it directly"
      rm $rmflag "$t"
      continue
    fi

    if [[ -d "$t" && $rdir -ne 1 ]];then
      echo $t: is a directory, use "-r" for directory
      continue
    fi

    if [[ $confirm -eq 1 ]];then
      _sf_yn "remove ${t}?"
      if [[ $? -ne 0 ]];then
        continue
      fi
    fi
    if [[ "$t" = */* ]];then
      local curdir="$PWD"
      local dir="${t%/*}"
      cd "$dir"
      dir="$PWD"
      cd "$curdir"
    else
      dir="$PWD"
    fi

    local origin_name="$dir/${t##*/}"
    local name=$(echo $t | sed -e "s|/$||" | sed -e "s|.*/||")
    local trash_head="${tboxtoday}/${name}"
    local trash_name="${trash_head}"
    local i=1
    while true;do
      if [[ -e "${trash_name}" ]];then
        trash_name="${trash_head}.${i}"
        ((i++))
      else
        break
      fi
    done

    mv "$origin_name" "$trash_name"
    local origin_name_short=$(echo $origin_name|sed "s|^$HOME|\~|")
    local trash_name_short=$(echo $trash_name|sed "s|^$HOME|\~|")
    echo "$origin_name_short was moved to $trash_name_short" >/dev/tty
    touch "$_s_file"
    cp "$_s_file" "${_s_file}.bak"
    echo "$(date +%Y%m%d-%H:%M),$origin_name_short,$trash_name_short" > "$_s_file"
    cat "${_s_file}.bak" >> "$_s_file"
    rm -f "${_s_file}.bak"
  done
} # }}}

cleanup () { # Clean up the trash box {{{
  # Cleanup fully
  if [[ "$1" -eq 1 ]];then
    rm -rf "${mytbox}"
    echo -n > "$_s_file"
    return 0
  fi

  # Check if trash box exists or not
  if [[ ! -d "${mytbox}" ]];then
    return 0
  fi

  # Clean up trash box
  touch "$_s_file"
  while :;do
    trash_box_size=$(du -ms "${mytbox}" |awk '{print $1}')
    if [ "${trash_box_size}" -gt "${maxboxsize}" ];then
      delete_dir=$(ls -tr "${tbox}" | head -1)
      rm -rf "${mytbox}/${delete_dir}"
      cp "$_s_file" "${_s_file}.bak"
      grep -v "${delete_dir}" "${_s_file}.bak" > "$_s_file"
      rm -f "${_s_file}.bak"
    else
      break
    fi
  done

  # Clean up trash list
  cp "$_s_file" "${_s_file}.bak"
  while read line;do
    local orig_ifs=$IFS
    IFS=","
    local -a tinfo
    tinfo=(${line})
    IFS=$orig_ifs
    trash_name_short=${tinfo[2]}
    trash_name=$(eval echo "$trash_name_short") # Expand ~
    if [[ ! -e "$trash_name" ]];then
      cp "${_s_file}.bak" "${_s_file}.bak2"
      grep -v "$trash_name}" "${_s_file}.bak2" > "${_s_file}.bak"
      rm -f "${_s_file}.bak2"
    fi
  done < "$_s_file"
  rm -f "${_s_file}.bak"
  return 0
} # }}}

listup () { # List up deleted files/directories {{{
  touch "$_s_file"
  local ntrash=$(echo $(wc -l < "$_s_file"))
  if [[ "$ntrash" -eq 0 ]];then
    echo There is no trash
    return 0
  fi
  local nwidth=${#ntrash}
  local i=$((ntrash-1))
  sed -e '1!G;h;$!d' "$_s_file"|while read line;do
    local orig_ifs=$IFS
    IFS=","
    local -a tinfo
    tinfo=($line)
    IFS=$orig_ifs
    local day=${tinfo[0]}
    local trash=${tinfo[1]}
    local dest=${tinfo[2]}
    trash=$(echo $trash|sed "s|^$HOME|\~|")
    dest=$(echo $dest|sed "s|^$HOME|\~|")
    if [ "$verbose" -ge 2 ];then
      printf "%${nwidth}d %s %s %s\n" $i "${day}" "${trash}" "${dest}"
    elif [ "$verbose" -eq 1 ];then
      printf "%${nwidth}d %s %s \n" $i "${day}" "${trash}"
    else
      printf "%${nwidth}d %s\n" $i "${trash}"
    fi
    ((i--))
  done
} # }}}

_sf_set_header () { # {{{
  _s_header="\e[43;30m$_s_n values in total\e[0m "
  if [[ "$_s_noheader" = 1 || "$_s_lines" -lt 10 ]];then
    return
  fi
  if [ "$_s_cols" -ge 62 ];then
    _s_header="$_s_header
 vim like move (j/k/gg/G etc...)
 d(delete), s(show details), q(quit)
 Enter: Select to bring back to the original place, and quit
 h: Select to copy it here (current directory), and quit"
  elif [ "$_s_cols" -ge 40 ];then
    _s_header="$_s_header
 vim like move (j/k/gg/G etc...)
 d(delete), s(show details), q(quit)
 Enter: Bring it back
 h: Copy it here (current directory)"
  fi
}  # }}}

_sf_show () { # _sf_show [is_last [n_show]] {{{
  local is_last=1
  local n_show=${2:-$_s_cols}

  local orig_ifs=$IFS
  IFS=","
  local -a tinfo
  tinfo=($_s_show)
  IFS=$orig_ifs
  local date=${tinfo[0]/-/ }
  local trash=${tinfo[1]}
  local dest=${tinfo[2]}

  _s_show="$trash"
  if [[ $verbose -ge 1 ]];then
    _s_show="$date $trash"
  fi
  if [[ $verbose -ge 2 ]];then
    _s_show="$_s_show $dest"
  fi

  if [[ "${#_s_show}" -gt "$n_show" ]];then
    if [ "$_s_showlast" -eq 0 ];then
      _s_show="${_s_show: 0: $n_show}"
    else
      _s_show="${_s_show: $((${#_s_show}-n_show))}"
    fi
  else
    _s_show=$(printf "%-${n_show}s" "${_s_show}")
  fi

  # Color search words
  if [[ -n "$_s_search_words" ]];then
    local negative=""
    if [[ "$is_selected" -eq 1 ]];then
      negative=";7"
    fi
    if [[ "$_s_search_opt" -le 1 ]];then
      if [[ "$_s_search_opt" -eq 0 ]];then
        local ic="i"
      else
        local ic=""
      fi
      local -a words
      words=(${_s_search_words})
      local w
      for w in "${words[@]}";do
        _s_show=$(echo "$_s_show"|perl -pe "s|($w)|\e[31${negative}m\1\e[0${negative}m|g$ic")
      done
    else
      if [[ "$_s_search_opt" -eq 2 ]];then
        local ic="i"
      else
        local ic=""
      fi
      w="${_s_search_words}"
      _s_show=$(echo "$_s_show"|perl -pe "s|($w)|\e[31${negative}m\1\e[0${negative}m|g$ic")
    fi
  fi
} # }}}

_sf_d () { # {{{
  local n=$_s_current_n
  local orig_ifs=$IFS
  IFS=","
  local -a tinfo
  tinfo=(${_s_inputs[$n]})
  IFS=$orig_ifs
  local origin_name_short=${tinfo[1]}
  local trash_name_short=${tinfo[2]}
  local origin_name=$(eval echo "$origin_name_short") # Expand ~
  local trash_name=$(eval echo "$trash_name_short") # Expand ~
  if [[ -z "$origin_name" || -z "$trash_name" ]];then
    _sf_echo "$_SENTAKU_INPUT_FILE might be corrupted
Check $(_sf_nth $(($1+1))) trash information in $_SENTAKU_INPUT_FILE"
    _sf_quit 1
    return 1
  elif [[ ! -e "$trash_name" ]];then
    _sf_echo "$origin_name_short ($trash_name_short) does not exist in $tbox, remove from the list"
  fi
  rm -rf "$trash_name"
  _sf_rm_del
} # }}}

_sf_s () { # {{{
  local orig_ifs=$IFS
  IFS=","
  local -a tinfo
  tinfo=(${_s_inputs[$_s_current_n]})
  IFS=$orig_ifs
  local date=${tinfo[0]/-/ }
  local origin_name_short=${tinfo[1]}
  local trash_name_short=${tinfo[2]}
  local trash_name=$(eval echo "$trash_name_short")
  local filetest=$(file --mime "$trash_name")
  case "$filetest" in
    *"No such file or directory"*)_sf_d;return;;
    *text*)local content="$(cat "$trash_name")";;
    *directory*)local content="$trash_name_short is a directory, contents:
$(ls "$trash_name")";;
    *binary*)local content="$trash_name_short is a binary file";;
    *)local content="$trash_name_short is something else";;
  esac
  _sf_clear
  echo "$(_sf_nth "$_s_current_n") trash: $date
  Original file    : $origin_name_short
  File in trash box: $trash_name_short
====================
$content" | ${PAGER:-less}
  _sf_wait
  _sf_printall
} # }}}

_sf_h () { # {{{
  here=1
  _sf_select
} # }}}

_sf_search_check () { # {{{
  local orig_ifs=$IFS
  IFS=","
  local -a tinfo
  tinfo=(${1})
  IFS=$orig_ifs
  local input="${tinfo[1]}"
  if [[ "$_s_search_opt" -le 1 ]];then
    if [[ "$_s_search_opt" -eq 0 ]];then
      local ic="-i"
    else
      local ic=""
    fi
    local -a words
    words=(${_s_search_words})
    local w
    for w in "${words[@]}";do
      if ! echo "${input}"| grep $ic -q "${w}";then
        return 1
      fi
    done
  else
    if [[ "$_s_search_opt" -eq 2 ]];then
      local ic="-i"
    else
      local ic=""
    fi
    if ! echo "${input}"| grep $ic -q "^${_s_search_words}";then
      return 1
    fi
  fi
} # }}}

_sf_execute () { # {{{
  local orig_ifs=$IFS
  IFS=","
  local -a tinfo
  tinfo=(${_s_inputs[$_s_current_n]})
  IFS=$orig_ifs
  local origin_name_short=${tinfo[1]%/} # remove trailing /
  local trash_name_short=${tinfo[2]%/}
  local origin_name=$(eval echo "$origin_name_short") # Expand ~
  local trash_name=$(eval echo "$trash_name_short")
  local target="$origin_name"

  # Check trash information
  if [[ -z "$origin_name"  || -z "$trash_name" ]];then
    echo "$_SENTAKU_INPUT_FILE might be corrupted" >/dev/tty
    echo "$(nth $(($1+1))) trash information was corrupted" >/dev/tty
    echo "removing..." >/dev/tty
    _sf_delete
    return 1
  elif [[ ! -e "$trash_name" ]];then
    echo "$trash_name_short doesn't exist, remove from the list" >/dev/tty
    _sf_delete
    return 1
  fi

  if [[ $here -eq 1 ]];then
    target="${origin_name##*/}"
  fi
  # For back, confirm anyways.
  if [[ -e "$target" ]];then
    _sf_yn "$target exists. Do you want to overwrite from trash box?"
    local ret=$?
    if [[ $ret -ne 0 ]];then
      return 0
    fi
  fi
  if [[ $here -eq 1 ]];then
    echo "Copying ${target} from ${trash_name_short} here"
    cp -r "$trash_name" "$target"
  else
    echo "Bringing ${target} back from ${trash_name_short}"
    mv "$trash_name" "$target"
    _sf_delete
  fi
} # }}}

_sf_main "$@"
